plugins {
	id 'java'
	id 'org.springframework.boot' version '3.1.5'
	id 'io.spring.dependency-management' version '1.1.3'
}


group = 'com.personalprojects'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '17'

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

dependencies {
	compileOnly 'org.projectlombok:lombok'
	annotationProcessor 'org.projectlombok:lombok'
	annotationProcessor 'org.mapstruct:mapstruct-processor:1.4.2.Final'

	developmentOnly 'org.springframework.boot:spring-boot-devtools'

	implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.3.0'
	implementation 'io.github.cdimascio:dotenv-java:3.0.0'
	implementation 'me.paulschwarz:spring-dotenv:4.0.0'
	implementation 'org.springframework.boot:spring-boot-starter-integration'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.integration:spring-integration-http'
	implementation 'org.glassfish.jaxb:jaxb-runtime:2.4.0-b180830.0438'
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.mapstruct:mapstruct:1.4.2.Final'
	implementation 'com.okta.spring:okta-spring-boot-starter:3.0.5'

	if (project.hasProperty('usePostgres')) {
		// Docker images will use postgreSQL.
		runtimeOnly 'org.postgresql:postgresql'
	} else {
		// Can run locally with h2 by default.
		runtimeOnly 'com.h2database:h2'
	}

	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.springframework.integration:spring-integration-test'
}

tasks.named('test') {
	useJUnitPlatform()
}
